using FlowMatic.Операції;
using FlowMatic.Юнівак;
using static FlowMatic.Операції.Input;

namespace FlowMatic;

public class ВіртуальнаМашина
{
    public СервоПривід[] СервоПривіди { get; private set; } = new СервоПривід[16];
    public int КількістьПриводів { get; private set; }
    public int КількістьФайлів => СервоПривідиСловник.Count;
    public IEnumerable<РезерваціяПривіда> РезерваціяПривідів => СервоПривідиСловник.Values;
    private Dictionary<char, РезерваціяПривіда> СервоПривідиСловник = new ();
    private Dictionary<char, string> ФайловіБуфери = new ();

    public СервоПривід ВзятиСервоПривід(char файл)
    {
        return СервоПривідиСловник[файл].ПоточнийПривід;
    }

    private int позиція;
    private Програма програма;
    public ЛентаВводу ЛентаВводу { get; private set; }
    public void СкомпілюватиПрограму(ЛентаВводу лентаВводу)
    {
        var компілятор = new Компілятор();
        програма = компілятор.Скомпілювати(лентаВводу.ІсходнийКод);
        this.ЛентаВводу = лентаВводу;
        ПідготуватиВхід((Input)програма.Операції[0]);

    }
    public void ВиконатиПрограму()
    {
        позиція = 0;
        while (true)
        {
            var поточнаКоманда = програма.Операції[позиція];
            switch (поточнаКоманда)
            {
                case Input input:
                    ВиконатиInput(input);
                    break;
                case Compare compare:
                    ВиконатиCompare(compare);
                    break;
                case Stop:
                    return;
                default:
                    throw new NotSupportedException($"Not supported command {поточнаКоманда} with index {позиція}");
            }

            позиція++;
        }
    }

    private void ВиконатиInput(Input input)
    {
        foreach (var описФайла in input.ВхідніФайли)
        {
            var ф = ВзятиФайл(описФайла);
            ПрочитатиФайл(ф, описФайла);
        }
    }

    private ДізайнФайлу ВзятиФайл(ОписФайла описФайла)
    {
        return ЛентаВводу.Файли.FirstOrDefault(_ => _.НазваФайлу == описФайла.НазваФайла) ?? throw new InvalidOperationException($"File {описФайла.НазваФайла} does not exists. Probably compilation was wrong."); ;
    }

    private void ПрочитатиФайл(ДізайнФайлу ф, ОписФайла описФайла)
    {
        var серво = ВзятиСервоПривід(описФайла.КодФайла);
        var елемент = серво.Прочитати(ф.ДізайнЕлементів.РозмірЕлемента);
        ФайловіБуфери[описФайла.КодФайла] = елемент;
    }

    private void ПідготуватиВхід(Input input)
    {
        СервоПривідиСловник.Clear();
        int кодПривіда = 1;
        foreach (var файл in input.ВхідніФайли)
        {
            var дізайнФайлу = ВзятиФайл(файл);
            var резерваціяПривіда = new РезерваціяПривіда()
            {
                Привід = new(),
                Привід2 = дізайнФайлу.БагатоБобінний ? new СервоПривід() : null,
                ДізайнФайлу = дізайнФайлу,
                АлокованіПриводи = дізайнФайлу.БагатоБобінний ? [кодПривіда, кодПривіда + 1] : [кодПривіда],
            };
            СервоПривіди[кодПривіда] = резерваціяПривіда.Привід;
            if (резерваціяПривіда.Привід2 is not null)
            {
                СервоПривіди[кодПривіда + 1] = резерваціяПривіда.Привід2;
            }
            кодПривіда += дізайнФайлу.БагатоБобінний ? 2 : 1;
            СервоПривідиСловник[файл.КодФайла] = резерваціяПривіда;
        }

        foreach (var файл in input.ВихідніФайли)
        {
            var дізайнФайлу = ВзятиФайл(файл);
            var резерваціяПривіда = new РезерваціяПривіда()
            {
                Привід = new(),
                Привід2 = дізайнФайлу.БагатоБобінний ? new СервоПривід() : null,
                ДізайнФайлу = дізайнФайлу,
                АлокованіПриводи = дізайнФайлу.БагатоБобінний ? [кодПривіда, кодПривіда + 1] : [кодПривіда],
            };
            СервоПривіди[кодПривіда] = резерваціяПривіда.Привід;
            if (резерваціяПривіда.Привід2 is not null)
            {
                СервоПривіди[кодПривіда + 1] = резерваціяПривіда.Привід2;
            }
            кодПривіда += дізайнФайлу.БагатоБобінний ? 2 : 1;
            СервоПривідиСловник[файл.КодФайла] = резерваціяПривіда;
        }

        КількістьПриводів = кодПривіда - 1;
    }

    private void ВиконатиCompare(Compare compare)
    {
        throw new NotImplementedException();
    }

    public class РезерваціяПривіда
    {
        public required СервоПривід Привід { get; set; }
        public СервоПривід? Привід2 { get; set; }

        public required ДізайнФайлу ДізайнФайлу { get; set; }

        public required int[] АлокованіПриводи { get; set; }

        public СервоПривід ПоточнийПривід
        {
            get
            {
                return Привід;
            }
        }
    }
}
